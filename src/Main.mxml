<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="700" height="400" title="Method Labz Winner Picker"
					   creationComplete="onCreationComplete(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.serializers.utility.TypeUtility;
			
			import flash.utils.clearInterval;
			import flash.utils.setInterval;
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.eventbrite.Eventbrite;
			
			private var app_key:String;
			private var user_key:String;
			private var eventbrite:Eventbrite;
			private var interval:int;
			[Bindable] private var events:ArrayCollection;
			[Bindable] private var attendees:ArrayCollection;
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				//nativeWindow.x = (Capabilities.screenResolutionX / 2)
				
				loadSettings();
				
				list.addEventListener(EventbriteEvent.VIEW_EVENT,getEvent);
				
				eventbrite = new Eventbrite(app_key,user_key);
				eventbrite.showBusyCursor = true;
				eventbrite.addEventListener(FaultEvent.FAULT,function(event:FaultEvent):void{
					Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail);
				});
				
				getEvents();
			}
			
			private function loadSettings():void{
				//var file:File = new File("/org/stevegood/assets/settings.xml");
				var file:File = File.applicationDirectory;
				file = file.resolvePath("org/stevegood/assets/settings.xml");
				var fs:FileStream = new FileStream();
				fs.open(file,FileMode.READ);
				var settingsXML:XML = new XML(fs.readUTFBytes(fs.bytesAvailable));
				fs.close();
				app_key = settingsXML.eventbrite.attribute("app_key");
				user_key = settingsXML.eventbrite.attribute("user_key");
				trace(false);
			}
			
			protected function user_list_events():void
			{
				user_list_eventsResult.token = eventbrite.userListEvents();
			}
			

			protected function getEvents():void
			{
				eventbrite.removeEventListener(ResultEvent.RESULT,getAttendeesListResult);
				eventbrite.addEventListener(ResultEvent.RESULT,getEventListResult);
				attendees = events = null;
				user_list_events();
			}
			
			protected function getEventListResult(event:ResultEvent):void{
				var collection:ArrayCollection = event.result.events;
				var sortField:SortField = new SortField();
				var sort:Sort = new Sort();
				sort.compareFunction = compare;
				collection.sort = sort;
				collection.refresh();
				events = collection;
			}
			
			protected function compare(a:Object, b:Object, fields:Array = null):int{
				var result:int = 0;
				var i:int = 0;
				var len:int = 1;
				var propName:String;
				while (result == 0 && (i < len))
				{
					result = compareValues(b.event.id, a.event.id);
					i++;
				}
				return result;
			}
			
			protected function compareValues(a:Object, b:Object):int
			{
				if (a == null && b == null)
					return 0;
				if (a == null)
					return 1;
				if (b == null)
					return -1;
				if (a < b)
					return -1;
				if (a > b)
					return 1;
				return 0;
			}
			
			protected function getEvent(event:EventbriteEvent):void{
				eventbrite.removeEventListener(ResultEvent.RESULT,getEventListResult);
				eventbrite.addEventListener(ResultEvent.RESULT,getAttendeesListResult);
				
				eventbrite.eventAttendeeList(event.event_id.toString());
			}
			
			protected function getAttendeesListResult(event:ResultEvent):void{
				attendees = event.result as ArrayCollection;
			}


			protected function button1_clickHandler(event:MouseEvent):void
			{
				interval = setInterval(spinAttendees,50);
				var delay:int = Math.round(Math.random()*10000);
				if (delay < 2000){
					delay += 2000;
				}
				setTimeout(pickWinner,delay);
			}
			
			protected function pickWinner():void{
				clearInterval(interval);
				interval = 0;
				if (attendees && attendees.length){
					var i:int = 0;
					var index:int;
					while (i != 7){
						index = Math.ceil(Math.random()*attendees.length)-1;
						i = Math.round(Math.random()*100);
						this.status = attendees[index].first_name + " " + attendees[index].last_name;
						attendeeList.selectedIndex = index;
					}
					Alert.show("Congratulations " + attendees[index].first_name + " " + attendees[index].last_name + "!","We Have a Winner!");
				}
			}
			
			protected function spinAttendees():void{
				if (attendees && attendees.length){
					var i:int = 0;
					var index:int;
					while (i != 7){
						index = Math.ceil(Math.random()*attendees.length)-1;
						i = Math.round(Math.random()*100);
						this.status = attendees[index].first_name + " " + attendees[index].last_name;
						attendeeList.selectedIndex = index;
					}
				}
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<s:CallResponder id="user_list_eventsResult"/>
		<!--eventbrite:Eventbrite id="eventbrite"
							   fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
							   showBusyCursor="true"/-->
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:HGroup x="0" y="0" width="100%" height="100%">
		<s:VGroup width="100%" height="100%">
			<s:List id="list" width="100%" height="100%" itemRenderer="EventsItemRenderer" dataProvider="{events}" alternatingItemColors="{[0xffffff,0xCCCCCC]}">
				<!--s:AsyncListView list="{TypeUtility.convertToCollection(user_list_eventsResult.lastResult.events)}" /-->
			</s:List>
			<s:HGroup width="100%" horizontalAlign="right">
				<s:Button label="Refresh" click="getEvents()"/>
			</s:HGroup>
		</s:VGroup>
		<s:VGroup width="100%" height="100%">
			<s:List id="attendeeList" width="100%" height="100%" dataProvider="{attendees}" itemRenderer="AttendeeListItemRenderer" selectionColor="0x00ff00" alternatingItemColors="{[0xffffff,0xCCCCCC]}">
			</s:List>
			<s:HGroup width="100%" horizontalAlign="right">
				<s:Button label="Pick a Winner!" click="button1_clickHandler(event)"/>
			</s:HGroup>
			
		</s:VGroup>
	</s:HGroup>
</s:WindowedApplication>
